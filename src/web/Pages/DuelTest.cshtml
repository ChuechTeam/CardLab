@page "{playerIndex:int}"
@using CardLab.Game.BasePacks
@model CardLab.Pages.DuelTest
@inject BasePackRegistry BasePackRegistry
@{
    var (defUrl, resUrl) = BasePackRegistry.GetPackUrls(HttpContext, BasePack1.PackId)!.Value;
    var @base = "ws://" + HttpContext.Request.Host;
}
<style>
    html, body {margin: 0; padding: 0;}
</style>
<script>
    window.duelTest =
    { 
        player: @ViewBag.PlayerIndex,
        defUrl: "@defUrl",
        resUrl: "@resUrl",
        socketUrl: "@(@base)/api/duel-test/p@(ViewBag.PlayerIndex)/ws"
    };
</script>

<div id="duel-container">
    <div class="duel-test-timings"></div>
    <div class="duel-test-buttons">
        <button class="duel-test-fullscreen">FS</button>
        <button class="duel-test-log">LOG</button>
        <button class="duel-test-reset">RESET</button>
    </div>
</div>

@section Scripts {
    <environment include="Development">
        <script type="module" src="@ViewData["ViteBase"]/src/game.ts"></script>
    </environment>
    <environment include="Production">
        <script src="~/client/scripts/game.js" type="module" asp-append-version="true"></script>
    </environment>
    <script>
        document.querySelector(".duel-test-fullscreen").addEventListener("click", e => {
        if (!document.fullscreenElement) {
            document.getElementById("duel-container").requestFullscreen();
        } else {
            document.exitFullscreen();
        }});
        
        document.querySelector(".duel-test-log").addEventListener("click", e => {
            window.duelLogOverlay.toggle();
        });
        
        document.querySelector(".duel-test-reset").addEventListener("click", async e => {
            await fetch(new URL("api/duel-test/reset", location.origin), { method: "POST" });
            location.reload();
        });
    </script>
}