using System.Collections.Immutable;
using System.Text.Json.Serialization;

namespace CardLab.Game;

public sealed record CardDefinition
{
    public string Name { get; init; } = "";

    // Description will soon be something that will only be generated by the server.
    public string Description { get; init; } = "";

    // This is what the user can edit and refer to as "description".
    public string Lore { get; init; } = "";

    // For now, only units can be made.
    // So yeah, this property is a bit of a joke...
    // ...But not anymore! We can make spells now! Just not in the editor, code only.

    public CardType Type { get; init; } = CardType.Unit;

    public CardRequirement Requirement { get; init; } = CardRequirement.SingleSlot;

    public int Attack { get; init; } = 5;
    public int Health { get; init; } = 5;
    public int Cost { get; init; } = 5;

    public string? Archetype { get; init; } = null;
    public string? NormalizedArchetype { get; init; } = null;

    public string? Author { get; init; } = null;

    public ImmutableArray<string> Traits { get; init; } = ImmutableArray<string>.Empty;

    public CardScript? Script { get; init; } = null;
}

public enum CardRequirement
{
    SingleSlot,
    SingleEntity,
    None
}

public sealed record CardScript
{
    // Weird hack to use built-in scripts.
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    public int? SpecialId { get; init; }

    public ImmutableArray<CardEventHandler> Handlers { get; init; } = [];
}

public sealed record CardEventHandler
{
    public required CardEvent Event { get; init; }

    public ImmutableArray<CardAction> Actions { get; init; } = [];
}

[JsonPolymorphic(TypeDiscriminatorPropertyName = "type")]
[JsonDerivedType(typeof(DrawCardAction), typeDiscriminator: "draw")]
[JsonDerivedType(typeof(CreateCardAction), typeDiscriminator: "create")]
[JsonDerivedType(typeof(DiscardCardAction), typeDiscriminator: "discard")]
[JsonDerivedType(typeof(ModifierAction), typeDiscriminator: "modifier")]
[JsonDerivedType(typeof(GrantAttackAction), typeDiscriminator: "grantAttack")]
[JsonDerivedType(typeof(HurtAction), typeDiscriminator: "hurt")]
[JsonDerivedType(typeof(HealAction), typeDiscriminator: "heal")]
[JsonDerivedType(typeof(AttackAction), typeDiscriminator: "attack")]
[JsonDerivedType(typeof(DeployAction), typeDiscriminator: "deploy")]
[JsonDerivedType(typeof(SingleConditionalAction), typeDiscriminator: "singleConditional")]
[JsonDerivedType(typeof(MultiConditionalAction), typeDiscriminator: "multiConditional")]
[JsonDerivedType(typeof(RandomConditionalAction), typeDiscriminator: "randomConditional")]
public abstract record CardAction;

public sealed record DrawCardAction(int N, ImmutableArray<Filter> Filters) : CardAction;

public sealed record CreateCardAction(int N, ImmutableArray<Filter> Filters) : CardAction;

public sealed record DiscardCardAction(int N, bool MyHand, ImmutableArray<Filter> Filters) : CardAction;

// 0 duration = until source dies
// -1 duration = forever
public sealed record ModifierAction(bool IsBuff, int Value, ScriptableAttribute Attr, Target Target, int Duration) : CardAction;

public sealed record GrantAttackAction(int N, Target Target) : CardAction;

public sealed record HurtAction(int Damage, Target Target) : CardAction;

public sealed record HealAction(int Damage, Target Target) : CardAction;

public sealed record AttackAction(Target Target) : CardAction;

public sealed record DeployAction(ImmutableArray<Filter> Filters, UnitDirection Direction) : CardAction;

public sealed record SingleConditionalAction(
    ConditionalTarget Target,
    ImmutableArray<Filter> Conditions,
    ImmutableArray<CardAction> Actions) : CardAction;

public sealed record MultiConditionalAction(
    int MinUnits,
    GameTeam Team,
    ImmutableArray<Filter> Conditions,
    ImmutableArray<CardAction> Actions) : CardAction;

public sealed record RandomConditionalAction(int PercentChance, ImmutableArray<CardAction> Actions) : CardAction;

[JsonPolymorphic(TypeDiscriminatorPropertyName = "type")]
[JsonDerivedType(typeof(MeTarget), typeDiscriminator: "me")]
[JsonDerivedType(typeof(CoreTarget), typeDiscriminator: "core")]
[JsonDerivedType(typeof(SourceTarget), typeDiscriminator: "source")]
[JsonDerivedType(typeof(TargetTarget), typeDiscriminator: "target")]
[JsonDerivedType(typeof(QueryTarget), typeDiscriminator: "query")]
[JsonDerivedType(typeof(NearbyAllyTarget), typeDiscriminator: "nearbyAlly")]
public abstract record Target;

public sealed record MeTarget : Target;

public sealed record CoreTarget(bool Enemy) : Target;

public sealed record SourceTarget : Target;

public sealed record TargetTarget : Target; // what a funny name

// N <= 0 means all
public sealed record QueryTarget(EntityType Kind, GameTeam Team, ImmutableArray<Filter> Filters, int N) : Target;

public sealed record NearbyAllyTarget(UnitDirection Direction) : Target;

[JsonPolymorphic(TypeDiscriminatorPropertyName = "type")]
[JsonDerivedType(typeof(PostSpawnEvent), typeDiscriminator: "postSpawn")]
[JsonDerivedType(typeof(PostCoreHurtEvent), typeDiscriminator: "postCoreHurt")]
[JsonDerivedType(typeof(PostUnitEliminatedEvent), typeDiscriminator: "postUnitEliminated")]
[JsonDerivedType(typeof(PostUnitKillEvent), typeDiscriminator: "postUnitKill")]
[JsonDerivedType(typeof(PostUnitHurtEvent), typeDiscriminator: "postUnitHurt")]
[JsonDerivedType(typeof(PostUnitHealEvent), typeDiscriminator: "postUnitHeal")]
[JsonDerivedType(typeof(PostUnitAttackEvent), typeDiscriminator: "postUnitAttack")]
[JsonDerivedType(typeof(PostUnitHealthChange), typeDiscriminator: "postUnitHealthChange")]
[JsonDerivedType(typeof(PostUnitNthAttackEvent), typeDiscriminator: "postUnitNthAttack")]
[JsonDerivedType(typeof(PostNthCardPlayEvent), typeDiscriminator: "postNthCardPlay")]
[JsonDerivedType(typeof(PostCardMoveEvent), typeDiscriminator: "postCardMove")]
[JsonDerivedType(typeof(PostTurnEvent), typeDiscriminator: "postTurn")]
public abstract record CardEvent;

public sealed record PostSpawnEvent : CardEvent;

public sealed record PostCoreHurtEvent(GameTeam Team) : CardEvent;

public sealed record PostUnitEliminatedEvent(GameTeam Team) : CardEvent;

// For now, only supports when I kill a unit.
public sealed record PostUnitKillEvent : CardEvent;

public sealed record PostUnitHurtEvent(GameTeam Team, bool Dealt) : CardEvent;

public sealed record PostUnitHealEvent(GameTeam Team, bool Dealt) : CardEvent;

public sealed record PostUnitAttackEvent(GameTeam Team, bool Dealt) : CardEvent;

// Only affects oneself
public sealed record PostUnitHealthChange(int Threshold) : CardEvent;

public sealed record PostUnitNthAttackEvent(int N) : CardEvent;

public sealed record PostNthCardPlayEvent(int N) : CardEvent;

public sealed record PostCardMoveEvent(CardMoveKind Kind) : CardEvent;

// Self == Ally in this event.
public sealed record PostTurnEvent(GameTeam Team) : CardEvent;

[JsonPolymorphic(TypeDiscriminatorPropertyName = "type")]
[JsonDerivedType(typeof(AttrFilter), typeDiscriminator: "attr")]
[JsonDerivedType(typeof(WoundedFilter), typeDiscriminator: "wounded")]
[JsonDerivedType(typeof(AdjacentFilter), typeDiscriminator: "adjacent")]
[JsonDerivedType(typeof(ArchetypeFilter), typeDiscriminator: "archetype")]
[JsonDerivedType(typeof(CardTypeFilter), typeDiscriminator: "cardType")]
public abstract record Filter;

public sealed record AttrFilter(ScriptableAttribute Attr, FilterOp Op, int Value) : Filter;

public sealed record WoundedFilter : Filter;

public sealed record AdjacentFilter : Filter;

public sealed record ArchetypeFilter(string Archetype) : Filter
{
    // Cached normalized archetype
    private readonly Lazy<string> _lazyNorm = new(() => CardModule.NormalizeArchetype(Archetype));
    [JsonIgnore] public string NormalizedArchetype => _lazyNorm.Value;
}

public sealed record CardTypeFilter(CardType Kind) : Filter;

public enum ScriptableAttribute
{
    Health,
    Attack,
    Cost
}

public enum FilterOp
{
    // Greater/lower also imply "or equal"
    // This should be renamed one day.
    Greater,
    Lower,
    Equal
}

public enum CardMoveKind
{
    Played,
    Discarded,
    Drawn
}

public enum GameTeam
{
    Self,
    Enemy,
    Ally,
    Any
}

public enum CardType
{
    Unit,
    Spell
}

public enum EntityType
{
    Unit,
    Card
}

public enum UnitDirection
{
    Right,
    Left,
    Up,
    Down
}

public enum ConditionalTarget
{
    Me,
    Source,
    Target
}